from collections import namedtuple
import json
import os

Stat = namedtuple("Stat", ["difficulty", "enjoyability"])

# read in data
with open(os.path.join("..", "data", "links.json"), "r") as f:
    links = json.load(f)

with open(os.path.join("..", "data", "levels.json"), "r") as f:
    levels = json.load(f)

    keys = list(levels.keys())
    for id in keys:
        levels[f"{id}_0"] = [row[2:-2] for row in levels[id]]
        del levels[id]

level_to_stats = {}
with open(os.path.join("..", "data", "level_to_stats.csv"), "r") as f:
    f.readline()  # skip first line
    for line in f.readlines():
        id, difficulty, enjoyability = line.strip().split(",")
        level_to_stats[f"{id}_0"] = Stat(difficulty, enjoyability)

# boiler plate typescript
typescript = "// Generated by ../scripts/make_gdm_graph.py.py\n"
typescript += 'import { Graph } from "./GDM-TS";\n'
typescript += 'import { CustomNode } from "./customNode";\n'
typescript += 'import { CustomEdge } from "./customEdge";\n'
typescript += 'import { KEY_DEATH, KEY_START } from "./constants";\n'

typescript += "\n// ========= Nodes =========\n"
typescript += "export const MDP = new Graph();\n\n"

typescript += "MDP.addNode(new CustomNode(KEY_START, 0, 0, 0, false, [], -1));\n"
typescript += "MDP.addNode(new CustomNode(KEY_DEATH, -1, -1, 0, true, [], -1));\n\n"

# Rest of the nodes
for key in level_to_stats:
    s = level_to_stats[key]
    typescript += f"MDP.addNode(new CustomNode('{key}', {s.difficulty}, {s.enjoyability}, 0, false, [], -1));\n"

# Edges
typescript += "\n// ========= Edges =========\n"
for src in links:
    _src = src.replace(",", "_")
    for tgt in links[src]:
        info = links[src][tgt]
        tgt = tgt.replace(",", "_")
        if info["tree search"]["percent_playable"] == 1.0:
            typescript += f'MDP.addEdge(new CustomEdge("{_src}", "{tgt}", [["{tgt}", 0.99], [KEY_DEATH, 0.01]], {info["tree search"]["link"]}));\n'

# Levels
typescript += "\n// ========= Level Segments =========\n"
TYPE = "{ [key: string]: string[] }"
typescript += f"export const idToLevel:{TYPE} = {json.dumps(levels, indent=2)};\n"

# Write typescript
with open(os.path.join("..", "src", "levels.ts"), "w") as f:
    f.write(typescript)
